/* We use flexbox on the body to easily center all the content on the page. */
body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #f0f0f0;
}

h1 {
    color: #333;
}

/* New style for the main game container */
#game-container {
    display: flex;
    flex-direction: row; /* Arrange children (tray and board) side-by-side */
    align-items: flex-start; /* Align items to the top */
    gap: 20px; /* Add some space between the tray and the board */
}

/* This styles our main puzzle board. 
   'display: grid' is the most important part; it turns the div into a grid container 
   that our JavaScript will later populate with rows and columns. */
#puzzle-board {
    border: 5px solid #333;
    background-color: #ccc;
    display: grid;
    /* The grid-template-columns and grid-template-rows will be set by JavaScript */
}

/* This styles the area for the scrambled pieces. 
   We also set it to 'display: grid' to neatly arrange the pieces. */
#pieces-tray {
    border: 2px dashed #666;
    padding: 10px;
    display: grid;
    gap: 10px;
    /* The grid-template-columns will be set by JavaScript to be a narrow column */
    max-height: 80vh; /* Set a max height to prevent page scrolling */
    overflow-y: auto; /* Allow vertical scrolling within the tray if needed */
}

/* This class is for the empty placeholder divs on the puzzle board.
   The border helps the user see the empty grid slots. */
.piece-slot {
    border: 1px solid #999;
    background-color: #ddd;
}

/* This class is for the actual, draggable image pieces.
   'cursor: grab' is important for user experience, signaling that the item is interactive. */
.puzzle-piece {
    cursor: grab;
    /* The width and height will be set by JavaScript */
}

/* This changes the cursor to a 'grabbing' hand while the user is actively dragging a piece. */
.puzzle-piece:active {
    cursor: grabbing;
}