/* We use flexbox on the body to easily center all the content on the page. */
body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #f0f0f0;
    margin: 0;
    padding: 1em;
    width: 100vw;
    box-sizing: border-box;
}

h1 {
    color: #333;
}

/* Updated style for the main game container */
#game-container {
    display: grid;
    /* Create two equal columns that share the available space */
    grid-template-columns: 1fr 1fr;
    width: 98%; /* Use most of the screen width */
    align-items: start; /* Align tray and board to the top */
    justify-items: center; /* Center the tray and board within their columns */
    gap: 20px;
}

/* This styles our main puzzle board. */
#puzzle-board {
    border: 5px solid #333;
    background-color: #ccc;
    display: grid;
    /* Animate the border, background, and gap properties on completion */
    transition: border-color 0.5s ease-in-out, background-color 0.5s ease-in-out, gap 0.5s ease-in-out;
    /* Size will be set by JavaScript */
}

/* This styles the area for the scrambled pieces. */
#pieces-tray {
    border: 2px dashed #666;
    padding: 10px;
    display: grid;
    gap: 10px;
    position: relative; /* Make this a positioning context for the message */
    /* Size will be determined by its content, which is sized by JS */
}

/* Placeholder size will now be set by JavaScript */
.tray-placeholder {
    background-color: transparent;
}

/* Updated: Styles for the completion message inside the tray */
#completion-message {
    position: absolute; /* Position relative to the pieces-tray */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    
    /* Use flexbox to center the content within the message div */
    display: flex;
    justify-content: center;
    align-items: center;
    
    background-color: rgba(240, 240, 240, 0.95); /* Light background to match page */
    
    color: #2c8f2c;
    text-align: center;
    
    opacity: 0; /* Start invisible */
    pointer-events: none; /* Don't block mouse events when invisible */
    transition: opacity 0.5s ease-in-out 0.5s; /* Fade in after a 0.5s delay */
    z-index: 100; /* Ensure it's on top of the faded pieces/placeholders */
}

#completion-message h2 {
    margin: 0; /* Remove default margin from h2 for better centering */
}

/* This class is for the empty placeholder divs on the puzzle board.
   The border helps the user see the empty grid slots. */
.piece-slot {
    border: 1px solid #999;
    background-color: #ddd;
    /* Animate both border and background color changes */
    transition: border-color 0.5s ease-in-out, background-color 0.5s ease-in-out;
    position: relative; /* Make this a positioning context for the overlay */
    overflow: hidden; /* Hide anything that might stick out during animation */
}

/* This class is for the actual, draggable image pieces.
   'cursor: grab' is important for user experience, signaling that the item is interactive. */
.puzzle-piece {
    cursor: grab;
    /* Add a transition for the fade-out effect */
    transition: opacity 0.8s ease-in-out;
}

/* New class to trigger the fade-out */
.puzzle-piece.fading-out {
    opacity: 0;
}

/* This changes the cursor to a 'grabbing' hand while the user is actively dragging a piece. */
.puzzle-piece:active {
    cursor: grabbing;
}

/* --- Styles for Completion --- */

/* When the puzzle is complete, show the message */
#game-container.puzzle-complete #completion-message {
    opacity: 1;
    pointer-events: auto;
}

/* When the puzzle is complete, the board's border and background are removed */
#game-container.puzzle-complete #puzzle-board {
    border-color: transparent;
    background-color: transparent;
    gap: 0; /* Make the pieces touch */
}

/* When the puzzle is complete, the inner slot borders and backgrounds are also removed */
#game-container.puzzle-complete .piece-slot {
    border-color: transparent;
    background-color: transparent;
}

/* Updated styles for the final image overlay */
.final-image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0; /* Start invisible */
    transition: opacity 0.8s ease-in-out; /* Define the smooth fade duration */
}

.final-image-overlay.visible {
    opacity: 1; /* This class will be added by JS to trigger the fade */
}